@model WebsiteBuilder.Public.WebsiteEditor.SaveWebsiteEditorDto

@{
    Layout = null;
    var navbarColor = Model.NavigationBars != null ? Model.NavigationBars.First().NavigationBarStyle : "";

    var groupWebsiteContent = Model.WebsiteContents.OrderBy(x => x.Y).GroupBy(x => x.Y).Select(y => new
    {
        Y = y.Key,
        Properties = y.ToList()
    });
}

<!DOCTYPE html>
<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <meta charset="UTF-8">
    <title></title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css" />

    <link href="~/Content/Common.css" rel="stylesheet" />
</head>
<body style="background-color:@Model.WebsiteColor">
    <div>
        <nav class="navbar @navbarColor" style="border-radius:0;">
                <ul class="nav navbar-nav">
                    @foreach (var item in Model.NavigationBars)
                    { 
                        var hrefTmp = "#" + item.SectionName;
                        <li id="15">
                            <a href="@hrefTmp">
                                <span class="tab">@item.NavigationName</span>
                            </a>
                        </li>
                    }
                </ul>
        </nav>
    </div>
    <div class="container-fluid">
        @foreach (var i in groupWebsiteContent)
        {
            var first = 0;
            <div class="row" style="margin-bottom:20px;">
                @foreach (var item in i.Properties.OrderBy(x => x.X))
                {
                    int colMargin = 0;
                    if (item.X == 0)
                    {
                        first = item.Width;
                    }
                    else if (item.X != 0 && first == 0)
                    {
                        colMargin = item.X;
                        first = item.Width + colMargin;
                    }
                    else
                    {
                        colMargin = item.X - first;
                        first = item.X + item.Width;
                    }
                    string colMarginString = colMargin != 0 ? "col-lg-offset-" + colMargin : "";
                    string colWidth = String.Format("col-lg-{0} {1}", item.Width, colMarginString);
                    int tmpHeightForText = item.Height * 20;
                    string height = String.Format("min-height: {0}px;", tmpHeightForText);

                    string tmpHeightForImage = item.Height * 70 + "px;";
                    if (item.WebsiteElementType == WebsiteBuilder.Public.Website.WebsiteElementType.Image)
                    {

                        <div class="@colWidth" style="@height ;display:flex;">
                            <img src="@Url.Content(item.ImageSrc)" style="width:100%;height:@tmpHeightForImage" id="@item.SelectorId" />
                        </div>
                    }
                    else
                    {

                        var fontSize = item.FontSize + "px";
                        var fontFamily = item.FontFamily == 0 ? "Arial" : item.FontFamily.ToString();
                        var fontWeight = item.FontWeight;
                        var fontStyle = item.FontWeight;
                        var fontColor = item.FontColor;
                        var textStyles = ";font-size:" + fontSize + ";font-family:" + fontFamily + ";font-weight:" + fontWeight + ";font-style:" + fontStyle + ";color:" + fontColor;
                        <div class="@colWidth " style="@height @textStyles" id="@item.SelectorId">
                            @item.Text
                        </div>
                    }
                }
            </div>
        }

    </div>
</body>
</html>
